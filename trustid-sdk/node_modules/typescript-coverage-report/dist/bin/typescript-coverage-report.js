#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var commander_1 = require("commander");
var lib_1 = __importDefault(require("../lib"));
var getOptions_1 = __importDefault(require("../lib/getOptions"));
var _a = require("../../package.json"), version = _a.version, description = _a.description, _b = _a.typeCoverage
// eslint-disable-next-line @typescript-eslint/no-var-requires
, typeCoverage = _b === void 0 ? {} : _b
// eslint-disable-next-line @typescript-eslint/no-var-requires
;
var argvWithVersion = function (argvs) {
    var vPos = argvs.indexOf("-v");
    if (vPos > -1) {
        argvs[vPos] = "-V";
    }
    return argvs;
};
commander_1.program
    .version(version)
    .description(description)
    .option("-o, --outputDir [string]", "The output directory where to generate the report.", "coverage-ts")
    .option("-t, --threshold [number]", "The minimum percentage of coverage required.", parseFloat, typeCoverage.atLeast || 80)
    .option("-s, --strict [boolean]", "Run the check in strict mode.", false)
    .option("-d, --debug [boolean]", "Show debug information.", false)
    .parse(argvWithVersion(process.argv));
var options = getOptions_1["default"](commander_1.program);
lib_1["default"](options)
    .then(function (_a) {
    var percentage = _a.percentage;
    if (percentage < options.threshold) {
        console.error("\nThe TypeScript coverage " + percentage.toFixed(2) + "% is lower than the threshold " + options.threshold + "%");
        process.exit(2);
    }
    process.exit(0);
})["catch"](function (error) {
    console.error(error);
    process.exit(255);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXNjcmlwdC1jb3ZlcmFnZS1yZXBvcnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYmluL3R5cGVzY3JpcHQtY292ZXJhZ2UtcmVwb3J0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUVBLHVDQUFvQztBQUNwQywrQ0FBNEM7QUFDNUMsaUVBQTJDO0FBRXJDLElBQUEsa0NBSzJCLEVBSi9CLG9CQUFPLEVBQ1AsNEJBQVcsRUFDWCxvQkFBaUI7QUFDakIsOERBQThEO0VBRDlELHNDQUFpQjtBQUNqQiw4REFBOEQ7QUFDL0IsQ0FBQztBQUVsQyxJQUFNLGVBQWUsR0FBRyxVQUFDLEtBQWU7SUFDdEMsSUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUVqQyxJQUFJLElBQUksR0FBRyxDQUFDLENBQUMsRUFBRTtRQUNiLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUM7S0FDcEI7SUFFRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUMsQ0FBQztBQUVGLG1CQUFPO0tBQ0osT0FBTyxDQUFDLE9BQU8sQ0FBQztLQUNoQixXQUFXLENBQUMsV0FBVyxDQUFDO0tBQ3hCLE1BQU0sQ0FDTCwwQkFBMEIsRUFDMUIsb0RBQW9ELEVBQ3BELGFBQWEsQ0FDZDtLQUNBLE1BQU0sQ0FDTCwwQkFBMEIsRUFDMUIsOENBQThDLEVBQzlDLFVBQVUsRUFDVixZQUFZLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FDM0I7S0FDQSxNQUFNLENBQUMsd0JBQXdCLEVBQUUsK0JBQStCLEVBQUUsS0FBSyxDQUFDO0tBQ3hFLE1BQU0sQ0FBQyx1QkFBdUIsRUFBRSx5QkFBeUIsRUFBRSxLQUFLLENBQUM7S0FDakUsS0FBSyxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUV4QyxJQUFNLE9BQU8sR0FBRyx1QkFBVSxDQUFDLG1CQUFPLENBQUMsQ0FBQztBQUVwQyxnQkFBc0IsQ0FBQyxPQUFPLENBQUM7S0FDNUIsSUFBSSxDQUFDLFVBQUMsRUFBYztRQUFaLDBCQUFVO0lBQ2pCLElBQUksVUFBVSxHQUFHLE9BQU8sQ0FBQyxTQUFTLEVBQUU7UUFDbEMsT0FBTyxDQUFDLEtBQUssQ0FDWCwrQkFBNkIsVUFBVSxDQUFDLE9BQU8sQ0FDN0MsQ0FBQyxDQUNGLHNDQUFpQyxPQUFPLENBQUMsU0FBUyxNQUFHLENBQ3ZELENBQUM7UUFFRixPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ2pCO0lBRUQsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNsQixDQUFDLENBQUMsQ0FDRCxPQUFLLENBQUEsQ0FBQyxVQUFDLEtBQUs7SUFDWCxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRXJCLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDcEIsQ0FBQyxDQUFDLENBQUMifQ==